// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ProxyUIntegrationClient is the client API for ProxyUIntegration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyUIntegrationClient interface {
	Correlation(ctx context.Context, in *CorrelationRequest, opts ...grpc.CallOption) (ProxyUIntegration_CorrelationClient, error)
	SubmitDocument(ctx context.Context, in *SubmitDocumentRequest, opts ...grpc.CallOption) (*SubmitDocumentResponse, error)
	Permission(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (ProxyUIntegration_PermissionClient, error)
	Data(ctx context.Context, opts ...grpc.CallOption) (ProxyUIntegration_DataClient, error)
}

type proxyUIntegrationClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyUIntegrationClient(cc grpc.ClientConnInterface) ProxyUIntegrationClient {
	return &proxyUIntegrationClient{cc}
}

func (c *proxyUIntegrationClient) Correlation(ctx context.Context, in *CorrelationRequest, opts ...grpc.CallOption) (ProxyUIntegration_CorrelationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProxyUIntegration_serviceDesc.Streams[0], "/protocol.ProxyUIntegration/Correlation", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyUIntegrationCorrelationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProxyUIntegration_CorrelationClient interface {
	Recv() (*CorrelationResponse, error)
	grpc.ClientStream
}

type proxyUIntegrationCorrelationClient struct {
	grpc.ClientStream
}

func (x *proxyUIntegrationCorrelationClient) Recv() (*CorrelationResponse, error) {
	m := new(CorrelationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *proxyUIntegrationClient) SubmitDocument(ctx context.Context, in *SubmitDocumentRequest, opts ...grpc.CallOption) (*SubmitDocumentResponse, error) {
	out := new(SubmitDocumentResponse)
	err := c.cc.Invoke(ctx, "/protocol.ProxyUIntegration/SubmitDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyUIntegrationClient) Permission(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (ProxyUIntegration_PermissionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProxyUIntegration_serviceDesc.Streams[1], "/protocol.ProxyUIntegration/Permission", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyUIntegrationPermissionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProxyUIntegration_PermissionClient interface {
	Recv() (*PermissionResponse, error)
	grpc.ClientStream
}

type proxyUIntegrationPermissionClient struct {
	grpc.ClientStream
}

func (x *proxyUIntegrationPermissionClient) Recv() (*PermissionResponse, error) {
	m := new(PermissionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *proxyUIntegrationClient) Data(ctx context.Context, opts ...grpc.CallOption) (ProxyUIntegration_DataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProxyUIntegration_serviceDesc.Streams[2], "/protocol.ProxyUIntegration/Data", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyUIntegrationDataClient{stream}
	return x, nil
}

type ProxyUIntegration_DataClient interface {
	Send(*DataRequest) error
	Recv() (*DataResponse, error)
	grpc.ClientStream
}

type proxyUIntegrationDataClient struct {
	grpc.ClientStream
}

func (x *proxyUIntegrationDataClient) Send(m *DataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyUIntegrationDataClient) Recv() (*DataResponse, error) {
	m := new(DataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProxyUIntegrationServer is the server API for ProxyUIntegration service.
// All implementations must embed UnimplementedProxyUIntegrationServer
// for forward compatibility
type ProxyUIntegrationServer interface {
	Correlation(*CorrelationRequest, ProxyUIntegration_CorrelationServer) error
	SubmitDocument(context.Context, *SubmitDocumentRequest) (*SubmitDocumentResponse, error)
	Permission(*PermissionRequest, ProxyUIntegration_PermissionServer) error
	Data(ProxyUIntegration_DataServer) error
	mustEmbedUnimplementedProxyUIntegrationServer()
}

// UnimplementedProxyUIntegrationServer must be embedded to have forward compatible implementations.
type UnimplementedProxyUIntegrationServer struct {
}

func (UnimplementedProxyUIntegrationServer) Correlation(*CorrelationRequest, ProxyUIntegration_CorrelationServer) error {
	return status.Errorf(codes.Unimplemented, "method Correlation not implemented")
}
func (UnimplementedProxyUIntegrationServer) SubmitDocument(context.Context, *SubmitDocumentRequest) (*SubmitDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitDocument not implemented")
}
func (UnimplementedProxyUIntegrationServer) Permission(*PermissionRequest, ProxyUIntegration_PermissionServer) error {
	return status.Errorf(codes.Unimplemented, "method Permission not implemented")
}
func (UnimplementedProxyUIntegrationServer) Data(ProxyUIntegration_DataServer) error {
	return status.Errorf(codes.Unimplemented, "method Data not implemented")
}
func (UnimplementedProxyUIntegrationServer) mustEmbedUnimplementedProxyUIntegrationServer() {}

// UnsafeProxyUIntegrationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyUIntegrationServer will
// result in compilation errors.
type UnsafeProxyUIntegrationServer interface {
	mustEmbedUnimplementedProxyUIntegrationServer()
}

func RegisterProxyUIntegrationServer(s grpc.ServiceRegistrar, srv ProxyUIntegrationServer) {
	s.RegisterService(&_ProxyUIntegration_serviceDesc, srv)
}

func _ProxyUIntegration_Correlation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CorrelationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProxyUIntegrationServer).Correlation(m, &proxyUIntegrationCorrelationServer{stream})
}

type ProxyUIntegration_CorrelationServer interface {
	Send(*CorrelationResponse) error
	grpc.ServerStream
}

type proxyUIntegrationCorrelationServer struct {
	grpc.ServerStream
}

func (x *proxyUIntegrationCorrelationServer) Send(m *CorrelationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProxyUIntegration_SubmitDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyUIntegrationServer).SubmitDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ProxyUIntegration/SubmitDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyUIntegrationServer).SubmitDocument(ctx, req.(*SubmitDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyUIntegration_Permission_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PermissionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProxyUIntegrationServer).Permission(m, &proxyUIntegrationPermissionServer{stream})
}

type ProxyUIntegration_PermissionServer interface {
	Send(*PermissionResponse) error
	grpc.ServerStream
}

type proxyUIntegrationPermissionServer struct {
	grpc.ServerStream
}

func (x *proxyUIntegrationPermissionServer) Send(m *PermissionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProxyUIntegration_Data_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyUIntegrationServer).Data(&proxyUIntegrationDataServer{stream})
}

type ProxyUIntegration_DataServer interface {
	Send(*DataResponse) error
	Recv() (*DataRequest, error)
	grpc.ServerStream
}

type proxyUIntegrationDataServer struct {
	grpc.ServerStream
}

func (x *proxyUIntegrationDataServer) Send(m *DataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proxyUIntegrationDataServer) Recv() (*DataRequest, error) {
	m := new(DataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ProxyUIntegration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.ProxyUIntegration",
	HandlerType: (*ProxyUIntegrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitDocument",
			Handler:    _ProxyUIntegration_SubmitDocument_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Correlation",
			Handler:       _ProxyUIntegration_Correlation_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Permission",
			Handler:       _ProxyUIntegration_Permission_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Data",
			Handler:       _ProxyUIntegration_Data_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protocol/proxyu.proto",
}
